/* The following code was generated by JFlex 1.6.0 */

// ------------------------------------------------------------------------
//  This software is part of 4SELLERS
//  Copyright Â© 2012 - 2016 logic-base GmbH
//  http://www.4sellers.de
//
//  All information contained herein is, and remains
//  the property of logic-base GmbH and its suppliers,
//  if any.  The intellectual and technical concepts contained
//  herein are proprietary to logic-base GmbH
//  and its suppliers and may be covered by German and Foreign Patents,
//  patents in process, and are protected by trade secret or copyright law.
//  Dissemination of this information or reproduction of this material
//  is strictly forbidden unless prior written permission is obtained
//  from logic-base GmbH.
//
//  4sellers.Redwood.Extensions.Lucene.Server.Analysis - ForSellersTokenizer1Logic.cs
//  2016/05/11
//
// ------------------------------------------------------------------------

package ForSellers.Redwood.Extensions.Lucene.Server.Analysis.Tokenizer;

import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.tokenattributes.TermAttribute;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Entwicklung/Local/jflex-1.6.1/lucene/src/main/java/ForSellers/Redwood/Extensions/Lucene/Server/Analysis/Tokenizer/forsellers_tokenizer1.flex</tt>
 */
class ForSellersTokenizer1Logic implements IForSellersTokenizerLogic {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\6\1\6\1\1\22\0\1\0\14\0\1\5\2\0"+
    "\12\3\7\0\32\4\6\0\32\4\12\0\1\6\32\0\1\0\11\0"+
    "\1\4\7\0\2\3\1\0\1\4\3\0\1\3\1\4\1\0\3\3"+
    "\1\0\27\4\1\0\7\4\30\4\1\0\10\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\2\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\2\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\2\4\1\4\1\4\1\4\1\4"+
    "\3\4\2\4\1\4\1\4\1\4\2\4\1\4\3\4\2\4\4\4"+
    "\1\4\2\4\1\4\3\4\3\4\2\4\1\4\2\4\1\4\1\4"+
    "\1\4\1\4\1\4\2\4\1\4\1\4\2\4\1\4\1\4\2\4"+
    "\1\4\3\4\1\4\1\4\1\4\2\4\2\4\1\4\1\4\3\4"+
    "\4\4\1\4\1\0\1\4\1\4\1\0\1\4\1\4\1\0\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\2\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\2\4\1\4\1\0\1\4\1\4\1\4\3\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\7\4\2\4"+
    "\1\4\2\4\2\4\1\4\1\4\4\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\105\4\1\4\33\4\22\4\4\0\14\4"+
    "\16\0\5\4\7\0\1\4\1\0\1\4\201\0\1\4\1\4\1\4"+
    "\1\4\1\4\1\0\1\4\1\4\2\0\1\4\3\4\1\0\1\4"+
    "\6\0\1\4\1\0\3\4\1\0\1\4\1\0\2\4\1\4\21\4"+
    "\1\0\11\4\43\4\1\4\2\4\3\4\3\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\5\4\1\4\1\4\1\0\1\4\1\4\2\4\2\4\63\4\60\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\10\0\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\2\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\2\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\0"+
    "\46\4\2\0\1\4\7\0\47\4\2\0\1\5\63\0\1\5\21\0"+
    "\33\4\5\0\3\4\55\0\40\4\1\4\12\4\25\0\12\3\4\0"+
    "\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\3"+
    "\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\131\4\13\0"+
    "\1\4\16\0\12\3\41\4\11\0\2\4\4\0\1\4\5\0\26\4"+
    "\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4\107\0\23\4"+
    "\121\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4\4\0\12\3"+
    "\1\0\1\4\17\4\4\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4\15\0"+
    "\2\4\1\0\3\4\4\0\12\3\2\4\2\0\6\3\13\0\6\4"+
    "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\3\2\0\3\4"+
    "\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\3"+
    "\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\3"+
    "\1\0\1\4\6\3\13\0\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\14\4\26\0\1\4\25\0\15\3\22\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\20\4\3\0\1\4\32\0\2\4\6\0"+
    "\2\4\4\0\12\3\10\0\7\3\6\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0"+
    "\2\4\4\0\12\3\1\0\2\4\22\0\10\4\1\0\3\4\1\0"+
    "\51\4\2\0\1\4\20\0\1\4\21\0\2\4\4\0\20\3\4\0"+
    "\6\4\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\37\0\12\3\21\0\60\4\1\0\2\4\14\0\6\4\1\4"+
    "\11\0\12\3\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4"+
    "\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4"+
    "\2\0\5\4\1\0\1\4\11\0\12\3\2\0\4\4\40\0\1\4"+
    "\37\0\24\3\14\0\10\4\1\0\44\4\33\0\5\4\163\0\53\4"+
    "\24\0\1\4\12\3\6\0\6\4\4\0\4\4\3\0\1\4\3\0"+
    "\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\12\3\6\0"+
    "\46\4\1\0\1\4\5\0\1\4\2\0\53\4\1\0\1\4\u014c\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\51\4"+
    "\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0\103\4"+
    "\16\0\24\3\3\0\20\4\20\0\125\4\13\0\1\5\u026c\4\2\0"+
    "\21\4\1\0\32\4\5\0\113\4\3\0\3\3\10\4\7\0\15\4"+
    "\1\0\4\4\16\0\22\4\16\0\22\4\16\0\15\4\1\0\3\4"+
    "\17\0\64\4\43\0\1\4\4\0\1\4\3\0\12\3\6\0\12\3"+
    "\14\0\1\5\11\0\12\3\6\0\43\4\1\4\64\4\10\0\51\4"+
    "\1\0\1\4\5\0\106\4\12\0\37\4\47\0\12\3\36\4\2\0"+
    "\5\4\13\0\54\4\25\0\7\4\10\0\13\3\45\0\27\4\11\0"+
    "\65\4\53\0\12\3\6\0\12\3\15\0\1\4\135\0\57\4\21\0"+
    "\7\4\4\0\12\3\51\0\36\4\15\0\2\4\12\3\54\4\32\0"+
    "\44\4\34\0\12\3\3\0\3\4\12\3\36\4\6\4\153\0\4\4"+
    "\1\0\4\4\3\0\2\4\11\0\54\4\77\4\15\4\1\4\42\4"+
    "\45\4\100\0\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\11\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\11\4"+
    "\10\4\6\4\2\0\6\4\2\0\10\4\10\4\10\4\10\4\6\4"+
    "\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\10\4\10\4\16\4\2\0\10\4\10\0\10\4\10\0"+
    "\10\4\10\0\5\4\1\0\2\4\4\4\2\0\1\4\3\0\3\4"+
    "\1\0\2\4\4\4\4\0\4\4\2\0\2\4\4\4\4\0\10\4"+
    "\5\4\5\0\3\4\1\0\2\4\4\4\4\0\13\0\5\0\6\5"+
    "\22\0\1\0\1\0\5\0\1\0\57\0\1\0\20\0\1\3\1\4"+
    "\2\0\6\3\5\0\1\4\12\3\6\0\15\4\145\0\1\4\4\0"+
    "\1\4\2\0\1\4\3\4\2\4\3\4\1\4\1\0\1\4\3\0"+
    "\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0"+
    "\1\4\4\4\1\4\4\4\1\4\2\0\2\4\2\4\5\0\1\4"+
    "\4\4\4\0\1\4\1\0\63\3\1\4\1\4\5\3\u02d6\0\74\3"+
    "\116\0\26\3\u0276\0\36\3\u046c\0\57\4\1\0\57\4\1\0\1\4"+
    "\1\4\3\4\2\4\1\4\1\4\1\4\1\4\1\4\1\4\4\4"+
    "\1\4\1\4\2\4\1\4\6\4\2\4\3\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\2\4\6\0\1\4\1\4\1\4"+
    "\1\4\3\0\1\4\1\4\11\0\1\3\2\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\70\4\7\0\1\4\20\0\27\4\11\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\70\0\1\5\2\0\1\5\24\0\1\4"+
    "\12\0\2\5\4\0\1\5\u01bf\0\1\0\4\0\1\4\1\4\1\3"+
    "\24\0\1\5\4\0\11\3\6\0\1\5\5\4\2\0\3\3\1\4"+
    "\1\4\4\0\126\4\6\0\2\4\1\4\1\5\132\4\1\0\3\4"+
    "\1\4\5\0\51\4\3\0\136\4\3\0\4\3\12\0\33\4\65\0"+
    "\20\4\40\0\12\3\36\0\10\3\1\0\17\3\40\0\12\3\47\0"+
    "\17\3\u0140\0\u19b6\4\112\0\u51cd\4\63\0\25\4\1\4\u0477\4\103\0"+
    "\50\4\6\4\2\0\u010c\4\1\4\3\0\20\4\12\3\2\4\24\0"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\20\0\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\2\4\2\0\106\4"+
    "\12\3\47\0\11\4\2\0\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\3\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\10\4\1\4\1\4\1\4\1\4\2\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\2\0\1\4\1\4"+
    "\1\4\1\4\1\0\1\4\1\4\1\4\3\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\4\1\4\1\4\1\4\1\4\4\4\2\0\2\4"+
    "\105\0\1\4\2\4\1\4\7\4\1\0\3\4\1\0\4\4\1\0"+
    "\27\4\15\0\6\3\12\0\64\4\16\0\62\4\34\0\12\3\30\0"+
    "\6\4\3\0\1\4\4\0\12\3\34\4\12\0\27\4\31\0\35\4"+
    "\7\0\57\4\34\0\1\4\12\3\6\0\5\4\1\0\1\4\11\4"+
    "\12\3\5\4\1\0\51\4\27\0\3\4\1\0\10\4\4\0\12\3"+
    "\6\0\20\4\1\4\6\4\3\0\1\4\3\0\62\4\1\0\1\4"+
    "\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\2\4"+
    "\1\4\2\0\13\4\7\0\1\4\2\4\14\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\4\4"+
    "\4\0\2\4\132\0\43\4\15\0\12\3\6\0\u2ba4\4\14\0\27\4"+
    "\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4"+
    "\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"+
    "\2\0\66\4\50\0\14\4\65\0\2\5\45\0\1\5\12\0\1\5"+
    "\14\0\5\4\1\0\207\4\20\0\1\5\2\0\12\3\7\0\32\4"+
    "\6\0\32\4\13\0\12\4\1\4\55\4\2\4\37\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\43\0\14\4\1\0\32\4"+
    "\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4\42\0\173\4"+
    "\14\0\55\3\14\0\71\3\21\0\2\3\364\0\35\4\3\0\61\4"+
    "\20\0\33\3\4\0\40\4\4\3\14\0\21\4\1\3\10\4\1\3"+
    "\5\0\46\4\12\0\36\4\2\0\44\4\4\0\10\4\1\0\5\3"+
    "\52\0\50\4\50\4\116\4\2\0\12\3\126\0\50\4\10\0\64\4"+
    "\234\0\u0137\4\11\0\26\4\12\0\10\4\230\0\6\4\2\0\1\4"+
    "\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4\2\0\10\3"+
    "\27\4\2\0\7\3\37\4\10\0\11\3\120\0\26\4\6\3\4\0"+
    "\32\4\106\0\70\4\6\0\2\4\100\0\1\4\17\0\4\4\1\0"+
    "\3\4\1\0\33\4\14\0\10\3\30\0\35\4\2\3\1\0\35\4"+
    "\3\3\40\0\10\4\1\0\34\4\6\0\5\3\20\0\66\4\12\0"+
    "\26\4\2\0\10\3\23\4\5\0\10\3\22\4\27\0\7\3\120\0"+
    "\111\4\u0217\0\37\3\u0184\0\65\4\32\0\36\3\23\0\55\4\40\0"+
    "\31\4\7\0\12\3\11\0\44\4\17\0\12\3\20\0\43\4\3\0"+
    "\1\4\14\0\60\4\16\0\4\4\13\0\12\3\1\4\6\0\24\3"+
    "\13\0\22\4\1\0\31\4\204\0\57\4\21\0\12\3\13\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\3\0\1\4\37\0\5\4\u011e\0\60\4\24\0\2\4\1\0\1\4"+
    "\10\0\12\3\246\0\57\4\121\0\60\4\24\0\1\4\13\0\12\3"+
    "\46\0\53\4\25\0\12\3\u01d6\0\40\4\40\4\23\3\14\0\1\4"+
    "\u01c0\0\71\4\u0507\0\u0399\4\147\0\157\3\u0b91\0\u042f\4\u33d1\0\u0239\4"+
    "\7\0\37\4\1\0\12\3\146\0\36\4\22\0\60\4\20\0\4\4"+
    "\14\0\12\3\1\0\7\3\1\0\25\4\5\0\23\4\u0370\0\105\4"+
    "\13\0\1\4\102\0\15\4\u4060\0\2\4\u0bfe\0\153\4\5\0\15\4"+
    "\3\0\11\4\7\0\12\4\u16c6\0\22\3\216\0\32\4\32\4\32\4"+
    "\7\4\1\0\22\4\32\4\32\4\1\4\1\0\2\4\2\0\1\4"+
    "\2\0\2\4\2\0\4\4\1\0\10\4\4\4\1\0\1\4\1\0"+
    "\7\4\1\0\13\4\32\4\32\4\2\4\1\0\4\4\2\0\10\4"+
    "\1\0\7\4\1\0\32\4\2\4\1\0\4\4\1\0\5\4\1\0"+
    "\1\4\3\0\7\4\1\0\32\4\32\4\32\4\32\4\32\4\32\4"+
    "\32\4\32\4\32\4\32\4\32\4\32\4\34\4\2\0\31\4\1\0"+
    "\31\4\1\0\6\4\31\4\1\0\31\4\1\0\6\4\31\4\1\0"+
    "\31\4\1\0\6\4\31\4\1\0\31\4\1\0\6\4\31\4\1\0"+
    "\31\4\1\0\6\4\1\4\1\4\2\0\62\3\u1000\0\305\4\2\0"+
    "\11\3\u0530\0\4\4\1\0\33\4\1\0\2\4\1\0\1\4\2\0"+
    "\1\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0"+
    "\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0"+
    "\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1\0"+
    "\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0"+
    "\21\4\5\0\3\4\1\0\5\4\1\0\21\4\u0244\0\15\3\u0ef3\0"+
    "\ua6d7\4\51\0\u1035\4\13\0\336\4\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[8];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\7\0\16\0\25\0\34\0\43\0\52\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[8];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\1\2\12\0\1\2"+
    "\7\0\1\4\1\6\1\7\4\0\1\6\1\5\1\7"+
    "\4\0\2\6\1\7\4\0\2\10\5\0\2\10\1\7"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\0\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[8];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
/**
 * Returns the number of characters up to the start of the matched text.
 */
@Override public final int GetMatchedStart() {
    return yychar;
}

/**
 * Returns the length of the matched text region.
 */
@Override public final int GetMatchedLength() {
    return zzMarkedPos - zzStartRead;
}

/**
 * Fills Lucene token with the current token text.
 */
@Override public final void GetMatchedText(Token t) {
  t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Fills Lucene TermAttribute with the current token text.
 */
@Override public final void GetMatchedText(TermAttribute t) {
    t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Create a new buffer and reset the parser
 */
@Override public final void Reset(java.io.Reader r) {
    if(this.zzBuffer.length > 16384) {
        this.zzBuffer = new char[16384];
    }

    this.yyreset(r);
}

/**
 * Resumes scanning until the next regular expression is matched,
 * the end of input is encountered or an I/O-Error occurs and
 * returns null.
 *
 * @return      the next token
 */
@Override public final TokenTypes GetNextToken() {
    try{
        return this.getNextTokenImpl();
    } catch (java.io.IOException ignored) {
        return null;
    }
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ForSellersTokenizer1Logic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ForSellersTokenizer1Logic(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 5004) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private TokenTypes getNextTokenImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 6: break;
        case 2: 
          { return TokenTypes.NUM;
          }
        case 7: break;
        case 3: 
          { return TokenTypes.ALPHANUM;
          }
        case 8: break;
        case 4: 
          { return TokenTypes.COMPANY;
          }
        case 9: break;
        case 5: 
          { return TokenTypes.HYPHENED_ALPHANUM;
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
