/* The following code was generated by JFlex 1.6.0 */

// ------------------------------------------------------------------------
//  This software is part of 4SELLERS
//  Copyright Â© 2012 - 2016 logic-base GmbH
//  http://www.4sellers.de
//
//  All information contained herein is, and remains
//  the property of logic-base GmbH and its suppliers,
//  if any.  The intellectual and technical concepts contained
//  herein are proprietary to logic-base GmbH
//  and its suppliers and may be covered by German and Foreign Patents,
//  patents in process, and are protected by trade secret or copyright law.
//  Dissemination of this information or reproduction of this material
//  is strictly forbidden unless prior written permission is obtained
//  from logic-base GmbH.
//
//  4sellers.Redwood.Extensions.Lucene.Server.Analysis - ForSellersTokenizerLogic.cs
//  2016/05/10
//
// ------------------------------------------------------------------------

package ForSellers.Redwood.Extensions.Lucene.Server.Analysis.Tokenizer;

import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.tokenattributes.TermAttribute;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Entwicklung/Local/jflex-1.6.1/lucene/src/main/java/ForSellers/Redwood/Extensions/Lucene/Server/Analysis/Tokenizer/forsellers_tokenizer.flex</tt>
 */
class ForSellersTokenizerLogic implements IForSellersTokenizerLogic {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\16\1\17\1\0\1\15\22\0\1\0\5\0\1\4"+
    "\1\2\4\0\1\7\1\1\1\3\1\7\12\11\6\0\1\5\32\10"+
    "\4\0\1\6\1\0\32\10\12\0\1\17\72\0\27\10\1\0\37\10"+
    "\1\0\u0568\10\12\12\206\10\12\12\u026c\10\12\12\166\10\12\12\166\10"+
    "\12\12\166\10\12\12\166\10\12\12\167\10\11\12\166\10\12\12\166\10"+
    "\12\12\166\10\12\12\340\10\12\12\166\10\12\12\u0166\10\12\12\266\10"+
    "\u0100\10\u0e00\10\50\0\1\17\1\17\u1016\0\u0150\14\140\0\20\14\u0100\0"+
    "\200\14\200\0\u19c0\14\100\0\u5200\14\u0c00\0\u2bb0\13\u2150\0\u0200\14\u0465\0"+
    "\73\14\75\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\63\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\1\1\7\0\2\2\7\0"+
    "\3\2\1\4\4\5\2\6\2\0\1\7\1\0\1\7"+
    "\3\2\3\5\6\7\3\5\3\0\1\10\1\11\1\10"+
    "\1\11\1\0\2\11\2\10\2\5\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\20\0\40\0\60\0\100\0\120\0\20\0\140"+
    "\0\160\0\200\0\220\0\240\0\260\0\300\0\320\0\340"+
    "\0\360\0\u0100\0\u0110\0\u0120\0\u0130\0\u0140\0\u0150\0\u0160"+
    "\0\u0170\0\u0180\0\u0190\0\u01a0\0\u01b0\0\u01c0\0\u01d0\0\u01e0"+
    "\0\240\0\u01f0\0\u0200\0\u0210\0\u0220\0\u0230\0\u0240\0\u0250"+
    "\0\u0260\0\u0270\0\u0280\0\u0290\0\u02a0\0\u02b0\0\u02c0\0\u02d0"+
    "\0\u02e0\0\u02f0\0\u0300\0\u0310\0\u0320\0\u0330\0\u0340\0\u0350"+
    "\0\u0360\0\u0370\0\u0380\0\u0390\0\u03a0\0\u03b0\0\u0160\0\u0110"+
    "\0\220\0\u0150\0\u03c0\0\u03d0\0\u03e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\22\0\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\4\1\21\1\6\5\0\1\22\1\0\1\23"+
    "\1\0\1\24\1\25\1\26\3\4\1\6\5\0\1\22"+
    "\1\12\1\27\1\14\1\15\1\25\1\26\1\21\1\4"+
    "\1\21\1\6\5\0\1\11\1\0\1\30\1\0\1\24"+
    "\1\16\1\17\4\6\22\0\1\2\11\0\1\31\2\32"+
    "\1\33\14\0\1\34\1\0\1\34\15\0\1\35\1\36"+
    "\1\37\1\40\14\0\1\41\1\0\1\41\15\0\1\42"+
    "\1\43\1\42\1\43\14\0\1\44\2\45\1\46\14\0"+
    "\1\17\2\47\6\0\1\11\1\12\1\30\1\14\1\15"+
    "\1\16\1\17\1\20\1\4\1\21\1\6\5\0\1\22"+
    "\1\12\1\23\1\14\1\15\1\25\1\26\1\21\1\4"+
    "\1\21\1\6\14\0\1\50\2\51\1\52\14\0\1\53"+
    "\2\54\1\55\14\0\4\43\14\0\1\56\2\57\1\60"+
    "\14\0\1\61\2\62\1\63\14\0\1\64\1\54\1\65"+
    "\1\55\14\0\1\66\2\36\1\40\5\0\1\67\1\0"+
    "\1\67\1\0\1\24\1\67\1\0\1\31\2\32\1\33"+
    "\5\0\1\70\1\0\1\70\1\0\1\24\1\70\1\71"+
    "\3\32\1\33\5\0\1\67\1\0\1\67\1\0\1\24"+
    "\1\67\1\0\4\33\6\0\1\12\5\0\1\34\1\0"+
    "\1\34\6\0\1\67\1\0\1\72\1\0\1\24\1\67"+
    "\1\0\1\66\2\36\1\40\5\0\1\70\1\0\1\73"+
    "\1\0\1\24\1\70\1\71\3\36\1\40\5\0\1\70"+
    "\1\0\1\74\1\0\1\24\1\70\1\71\3\36\1\40"+
    "\5\0\1\67\1\0\1\75\1\0\1\24\1\67\1\0"+
    "\4\40\5\0\1\76\1\0\1\76\4\0\1\42\1\43"+
    "\1\42\1\43\5\0\1\76\1\0\1\76\4\0\4\43"+
    "\5\0\1\67\1\0\1\67\1\0\1\24\1\67\1\0"+
    "\1\44\2\45\1\46\5\0\1\70\1\0\1\70\1\0"+
    "\1\24\1\70\1\71\3\45\1\46\5\0\1\67\1\0"+
    "\1\67\1\0\1\24\1\67\1\0\4\46\5\0\1\71"+
    "\1\0\1\71\2\0\2\71\3\47\6\0\1\16\1\0"+
    "\1\16\1\0\1\24\1\16\1\17\1\50\2\51\1\52"+
    "\5\0\1\25\1\0\1\25\1\0\1\24\1\25\1\26"+
    "\3\51\1\52\5\0\1\16\1\0\1\16\1\0\1\24"+
    "\1\16\1\17\4\52\5\0\1\16\1\0\1\77\1\0"+
    "\1\24\1\16\1\17\1\53\2\54\1\55\5\0\1\25"+
    "\1\0\1\100\1\0\1\24\1\25\1\26\3\54\1\55"+
    "\5\0\1\16\1\0\1\77\1\0\1\24\1\16\1\17"+
    "\4\55\5\0\1\16\1\0\1\16\1\0\1\24\1\16"+
    "\1\17\1\56\2\57\1\60\5\0\1\25\1\0\1\25"+
    "\1\0\1\24\1\25\1\26\3\57\1\60\5\0\1\16"+
    "\1\0\1\16\1\0\1\24\1\16\1\17\4\60\5\0"+
    "\1\17\1\0\1\17\2\0\2\17\1\61\2\62\1\63"+
    "\5\0\1\26\1\0\1\26\2\0\2\26\3\62\1\63"+
    "\5\0\1\17\1\0\1\17\2\0\2\17\4\63\5\0"+
    "\1\16\1\0\1\101\1\0\1\24\1\16\1\17\1\53"+
    "\2\54\1\55\5\0\1\25\1\0\1\102\1\0\1\24"+
    "\1\25\1\26\3\54\1\55\5\0\1\67\1\0\1\75"+
    "\1\0\1\24\1\67\1\0\1\66\2\36\1\40\14\0"+
    "\4\46\14\0\4\60\14\0\4\63\14\0\1\103\1\40"+
    "\1\103\1\40\14\0\4\55\14\0\1\104\1\55\1\104"+
    "\1\55\14\0\4\40\14\0\4\105\5\0\1\67\1\0"+
    "\1\72\1\0\1\24\1\67\1\0\4\40\5\0\1\16"+
    "\1\0\1\101\1\0\1\24\1\16\1\17\4\55\5\0"+
    "\1\76\1\0\1\76\4\0\4\105\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\7\0\2\1\7\0"+
    "\12\1\2\0\1\1\1\0\20\1\3\0\4\1\1\0"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
/**
 * Returns the number of characters up to the start of the matched text.
 */
@Override public final int GetMatchedStart() {
    return yychar;
}

/**
 * Returns the length of the matched text region.
 */
@Override public final int GetMatchedLength() {
    return zzMarkedPos - zzStartRead;
}

/**
 * Fills Lucene token with the current token text.
 */
@Override public final void GetMatchedText(Token t) {
  t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Fills Lucene TermAttribute with the current token text.
 */
@Override public final void GetMatchedText(TermAttribute t) {
    t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Create a new buffer and reset the parser
 */
@Override public final void Reset(java.io.Reader r) {
    if(this.zzBuffer.length > 16384) {
        this.zzBuffer = new char[16384];
    }

    this.yyreset(r);
}

/**
 * Resumes scanning until the next regular expression is matched,
 * the end of input is encountered or an I/O-Error occurs and
 * returns null.
 *
 * @return      the next token
 */
@Override public final TokenTypes GetNextToken() {
    try{
        return this.getNextTokenImpl();
    } catch (java.io.IOException ignored) {
        return null;
    }
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ForSellersTokenizerLogic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ForSellersTokenizerLogic(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private TokenTypes getNextTokenImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 11: break;
        case 2: 
          { return TokenTypes.ALPHANUM;
          }
        case 12: break;
        case 3: 
          { return TokenTypes.CJ;
          }
        case 13: break;
        case 4: 
          { return TokenTypes.APOSTROPHE;
          }
        case 14: break;
        case 5: 
          { return TokenTypes.HOST;
          }
        case 15: break;
        case 6: 
          { return TokenTypes.COMPANY;
          }
        case 16: break;
        case 7: 
          { return TokenTypes.NUM;
          }
        case 17: break;
        case 8: 
          { return TokenTypes.ACRONYM;
          }
        case 18: break;
        case 9: 
          { return TokenTypes.ACRONYM_DEP;
          }
        case 19: break;
        case 10: 
          { return TokenTypes.EMAIL;
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
